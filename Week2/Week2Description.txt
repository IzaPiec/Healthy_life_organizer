1. Continuing with C# tutorials and practicing on C#

2. Reading ASP.NET tutorials

3. Sample application (from a tutorial) developed in ASP.NET

4. Create a folder named Week2 and place inside it Week2Description.txt that will contain all the tasks from Week2.

5. CodeOnYourOwn#2: Create a new project. Define three string variables. Read from the keyboard the contents of the first string. From the keyboard write this: !!!I am learning !!!. Do the same for the second string, but from the keyboard write: --C#-- (with the dashes). From the first string remove the characters "!" and from the second string remove the characters "-" with an existing method designed to remove characters from strings. Concatenate the first two strings and place the result in the third one. Print the third one.

6. CodeOnYourOwn#3: Create a new project or use an already existing project. Create an array of integers and initialize it with 10 random integers between 0 and 20. Sort this array with a sorting algorithm of your choice.

7. CodeOnYourOwn#4 (Reading a file): Create a new project. Create a .txt file and place inside it any text you want. Make sure to place the txt file inside the folder of the C# project. Read the contents of the file from your project and store the contents inside a string variable. Count the number of vowels and consonants from the string variable and write them to the terminal.

8. CodeOnYourOwn#5 (Classes #1): Create a new project. Create the class User. Add to the class User the following members as private: Name, Surname, Email, Nickname. Create public methods for accessing and setting the values of these members. Example public string GetName() which returns the private member Name. Example public void SetName(string name){Name = name}. Create an empty constructor, that takes no arguments. In your Main method, intantiate two objects of type User and call the public methods to complete each of their fields with what values you want. Print to the terminal the Users in the format: Name: ...., Surname:...., Nickaname:...., Email:.....

9. CodeOnYourOwn#6 (Classes #2): Make a new class in the same project called UserM. This class has the same members as the previous one. Instead of the public methods from the previous class for accessing and setting the fields, here we will create public properties. Hint: http://www.tutorialspoint.com/csharp/csharp_properties.htm. In the Main method, use the properties to set values to the fields. Print to the terminal as in the previous task.

10. CodeOnYourOwn#7 (Operator overloading): Create a new project. Define the class IrationalNumber. This class has two members: two integers called real and unreal. Create a constructor that receives two parameters and completes the members. Define as well public methods or properties for setting and accessing the values of the private members real and unreal. Overload the operators +, - and * for this class. Hint: http://www.tutorialspoint.com/csharp/csharp_operator_overloading.htm. In your Main method define two objects of the type IrationalNumbers and assign them values for their members. Then, call the overloaded operators and print to the terminal the results of the operations.

11. CodeOnYourOwn#8 (Classes #3: Inheritance): Create a new project. Define a class called Circle. The Circle class has a private member called radius. Define an empty constructor that sets the radius to 1 and a constructor that receives the radius as a parameter and sets the member to the received value. Define a public method Area() that returns the area of the circle. Now define a class called Cylinder that inherits the class Circle. The cylinder has a private member called height. Create two constructors: an empty one that first calls the invokes the constructor of the superclass (Hint: base()) and then sets the height to 1 and another constructor that receives the height as parameter, first it calls the constructor of the superclass, then it sets the height accordingly. Create a public method Volume() that uses the Area() method to compute the volume of the cylinder. In your Main method instantiate a Circle and a Cylinder by using the second constructor for both and then call the method Area for the Circle and Volume for the Cylinder and print the results.

12. CodeOnYourOwn#9 (Nullables): Create a class called Utils. Inside it create some public static methods: Count that takes as parameter an ArrayList<double?> and returns the number of non-nullable values from it, Minimum which has as return type double? and returns the minimum of the non-nullable values from the ArrayList<double?> that he receives or null if all the values are null, Maximum, Average and Sum implemented in the same principle as Minimum. In your Main method instantiate two ArrayList<double?> one with only null values and the other with null and non-null values. Call each method from the Utils class and print its result.

13. CodeOnYourOwn#10 (Passing parameters as references): In the same class as your Main method define a public static void method called Swap. This method receives two references of integers as parameters. (Hint: public static void Swap(ref int x, ref int y) With the help of a local auxiliary variable it makes x has the value of y and y have the value of x. In your Main method define two integers and call the Swap method on them. (Hint: int x = 5, y = 3; Swap(ref x, ref y)) Print the new values of x and y. 